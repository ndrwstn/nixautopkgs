name: 🔄 Update and Build

on:
  workflow_dispatch:
    inputs:
      package:
        description: "Package to update (gcs, opencode, or all)"
        required: true
        type: string
      pr_number:
        description: "PR number (if applicable)"
        required: false
        type: string
      target_ref:
        description: "Target branch/ref to update"
        required: true
        type: string
  # SECURITY: Only triggered by hash update workflow
  # No direct pull_request triggering to avoid race conditions

jobs:
  # SECURITY: Comprehensive Renovate-only validation
  security-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      is-renovate: ${{ steps.validate.outputs.is-renovate }}
    steps:
      - name: Validate workflow dispatch inputs
        id: validate
        run: |
          echo "=== WORKFLOW DISPATCH VALIDATION ==="
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "Package: ${{ github.event.inputs.package }}"
          echo "PR Number: ${{ github.event.inputs.pr_number }}"
          echo "Target Ref: ${{ github.event.inputs.target_ref }}"

          # Validate required inputs
          if [[ -z "${{ github.event.inputs.package }}" ]]; then
            echo "❌ SECURITY: Package input is required"
            echo "is-renovate=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [[ -z "${{ github.event.inputs.target_ref }}" ]]; then
            echo "❌ SECURITY: Target ref input is required"
            echo "is-renovate=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "✅ SECURITY: Workflow dispatch validation passed"
          echo "is-renovate=true" >> $GITHUB_OUTPUT

  test-builds:
    runs-on: ubuntu-latest
    needs: security-check
    if: needs.security-check.outputs.is-renovate == 'true'
    outputs:
      package: ${{ github.event.inputs.package }}
      pr-number: ${{ github.event.inputs.pr_number }}
      target-ref: ${{ github.event.inputs.target_ref }}
    strategy:
      fail-fast: false
      matrix:
        platform: [x86_64-linux, aarch64-linux, x86_64-darwin, aarch64-darwin]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_ref }}

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Test builds for ${{ matrix.platform }}
        id: build-test
        run: |
          PACKAGE="${{ github.event.inputs.package }}"
          PLATFORM="${{ matrix.platform }}"
          echo "Building package: $PACKAGE on platform: $PLATFORM"

          if [[ "$PACKAGE" == "gcs" ]]; then
            echo "Building only GCS package for $PLATFORM..."
            if nix build .#gcs --system $PLATFORM --no-link; then
              echo "✅ GCS build successful on $PLATFORM"
            else
              echo "❌ GCS build failed on $PLATFORM"
              exit 1
            fi
          elif [[ "$PACKAGE" == "opencode" ]]; then
            echo "Building only OpenCode package for $PLATFORM..."
            if nix build .#opencode --system $PLATFORM --no-link; then
              echo "✅ OpenCode build successful on $PLATFORM"
            else
              echo "❌ OpenCode build failed on $PLATFORM"
              exit 1
            fi
          else
            echo "Building all packages for $PLATFORM..."
            if ./bin/build-$PLATFORM.sh; then
              echo "✅ All packages build successful on $PLATFORM"
            else
              echo "❌ Build failed on $PLATFORM"
              exit 1
            fi
          fi

  build-summary:
    runs-on: ubuntu-latest
    needs: test-builds
    if: always()
    outputs:
      success: ${{ steps.summary.outputs.success }}
    steps:
      - name: Summarize build results
        id: summary
        run: |
          if [[ "${{ needs.test-builds.result }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "🎉 All builds successful on all platforms!"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "💥 One or more builds failed"
          fi

  trigger-auto-merge:
    runs-on: ubuntu-latest
    needs: [test-builds, build-summary]
    if: always() && needs.build-summary.outputs.success == 'true' && needs.test-builds.outputs.pr-number != ''
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Trigger auto-merge workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const prNumber = '${{ needs.test-builds.outputs.pr-number }}';
            const package = '${{ needs.test-builds.outputs.package }}';
            const targetRef = '${{ needs.test-builds.outputs.target-ref }}';

            console.log(`Triggering auto-merge for PR: ${prNumber}`);
            console.log(`Package: ${package}`);

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            // Trigger auto-merge workflow by creating a workflow dispatch
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-merge.yml',
              ref: 'master',
              inputs: {
                pr_number: prNumber,
                pr_ref: targetRef,
                build_success: 'true'
              }
            });
