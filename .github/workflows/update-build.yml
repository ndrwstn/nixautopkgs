name: 🔄 Update and Build

on:
  workflow_dispatch:
    inputs:
      package:
        description: "Package to update (gcs, opencode, or all)"
        required: true
        type: string
      pr_number:
        description: "PR number (if applicable)"
        required: false
        type: string
      target_ref:
        description: "Target branch/ref to update"
        required: true
        type: string
  # SECURITY: Only triggered by hash update workflow
  # No direct pull_request triggering to avoid race conditions

jobs:
  # SECURITY: Comprehensive Renovate-only validation
  security-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      is-renovate: ${{ steps.validate.outputs.is-renovate }}
    steps:
      - name: Validate workflow dispatch inputs
        id: validate
        run: |
          echo "=== WORKFLOW DISPATCH VALIDATION ==="
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "Package: ${{ github.event.inputs.package }}"
          echo "PR Number: ${{ github.event.inputs.pr_number }}"
          echo "Target Ref: ${{ github.event.inputs.target_ref }}"

          # Validate required inputs
          if [[ -z "${{ github.event.inputs.package }}" ]]; then
            echo "❌ SECURITY: Package input is required"
            echo "is-renovate=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [[ -z "${{ github.event.inputs.target_ref }}" ]]; then
            echo "❌ SECURITY: Target ref input is required"
            echo "is-renovate=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "✅ SECURITY: Workflow dispatch validation passed"
          echo "is-renovate=true" >> $GITHUB_OUTPUT

  update-hashes:
    runs-on: ubuntu-latest
    needs: security-check
    if: needs.security-check.outputs.is-renovate == 'true'
    outputs:
      hashes-updated: ${{ steps.update-hashes.outputs.updated }}
      package: ${{ github.event.inputs.package }}
      pr-number: ${{ github.event.inputs.pr_number }}
      target-ref: ${{ github.event.inputs.target_ref }}
    steps:
      - name: Set package from input
        id: detect-package
        run: |
          PACKAGE="${{ github.event.inputs.package }}"
          PR_NUMBER="${{ github.event.inputs.pr_number }}"
          TARGET_REF="${{ github.event.inputs.target_ref }}"

          echo "Package: $PACKAGE"
          echo "PR Number: $PR_NUMBER"
          echo "Target Ref: $TARGET_REF"

          echo "package=$PACKAGE" >> $GITHUB_OUTPUT
          echo "✅ Using package from workflow input: $PACKAGE"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.target_ref }}
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Update package hashes
        id: update-hashes
        run: |
          PACKAGE="${{ steps.detect-package.outputs.package }}"
          echo "Updating hashes for package: $PACKAGE"

          if [[ "$PACKAGE" == "gcs" ]]; then
            echo "Running GCS hash update script..."
            if ./bin/update-gcs-hashes.sh; then
              echo "updated=true" >> $GITHUB_OUTPUT
              echo "✅ GCS hashes updated successfully"
            else
              echo "updated=false" >> $GITHUB_OUTPUT
              echo "ℹ️  GCS hashes unchanged or failed"
            fi
          elif [[ "$PACKAGE" == "opencode" ]]; then
            echo "Running OpenCode hash update script..."
            if ./bin/update-opencode-hashes.sh; then
              echo "updated=true" >> $GITHUB_OUTPUT
              echo "✅ OpenCode hashes updated successfully"
            else
              echo "updated=false" >> $GITHUB_OUTPUT
              echo "ℹ️  OpenCode hashes unchanged or failed"
            fi
          else
            echo "Running all hash update scripts..."
            if ./bin/update-hashes.sh; then
              echo "updated=true" >> $GITHUB_OUTPUT
              echo "✅ All package hashes updated successfully"
            else
              echo "updated=false" >> $GITHUB_OUTPUT
              echo "ℹ️  No hash updates needed"
            fi
          fi

      - name: Commit hash updates
        if: steps.update-hashes.outputs.updated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add packages/*.nix

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            PACKAGE="${{ steps.detect-package.outputs.package }}"
            if [[ "$PACKAGE" == "all" ]]; then
              COMMIT_MSG="chore: update nix package hashes - auto-updated by GitHub Actions"
            else
              COMMIT_MSG="chore: update $PACKAGE package hashes - auto-updated by GitHub Actions"
            fi
            git commit -m "$COMMIT_MSG"
            git push origin ${{ github.event.inputs.target_ref }}
          fi

  test-builds:
    runs-on: ubuntu-latest
    needs: update-hashes
    if: always() && (needs.update-hashes.result == 'success')
    outputs:
      build-success: ${{ steps.build-summary.outputs.success }}
    strategy:
      fail-fast: false
      matrix:
        platform: [x86_64-linux, aarch64-linux, x86_64-darwin, aarch64-darwin]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update-hashes.outputs.target-ref }}

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Test builds for ${{ matrix.platform }}
        id: build-test
        run: |
          PACKAGE="${{ needs.update-hashes.outputs.package }}"
          PLATFORM="${{ matrix.platform }}"
          echo "Building package: $PACKAGE on platform: $PLATFORM"

          if [[ "$PACKAGE" == "gcs" ]]; then
            echo "Building only GCS package for $PLATFORM..."
            if nix build .#gcs --system $PLATFORM --no-link; then
              echo "✅ GCS build successful on $PLATFORM"
            else
              echo "❌ GCS build failed on $PLATFORM"
              exit 1
            fi
          elif [[ "$PACKAGE" == "opencode" ]]; then
            echo "Building only OpenCode package for $PLATFORM..."
            if nix build .#opencode --system $PLATFORM --no-link; then
              echo "✅ OpenCode build successful on $PLATFORM"
            else
              echo "❌ OpenCode build failed on $PLATFORM"
              exit 1
            fi
          else
            echo "Building all packages for $PLATFORM..."
            if ./bin/build-$PLATFORM.sh; then
              echo "✅ All packages build successful on $PLATFORM"
            else
              echo "❌ Build failed on $PLATFORM"
              exit 1
            fi
          fi

  build-summary:
    runs-on: ubuntu-latest
    needs: test-builds
    if: always()
    outputs:
      success: ${{ steps.summary.outputs.success }}
    steps:
      - name: Summarize build results
        id: summary
        run: |
          if [[ "${{ needs.test-builds.result }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "🎉 All builds successful on all platforms!"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "💥 One or more builds failed"
          fi

  trigger-auto-merge:
    runs-on: ubuntu-latest
    needs: [update-hashes, build-summary]
    if: always() && needs.build-summary.outputs.success == 'true' && needs.update-hashes.outputs.pr-number != ''
    steps:
      - name: Trigger auto-merge workflow
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ needs.update-hashes.outputs.pr-number }}';
            const package = '${{ needs.update-hashes.outputs.package }}';
            const targetRef = '${{ needs.update-hashes.outputs.target-ref }}';

            console.log(`Triggering auto-merge for PR: ${prNumber}`);
            console.log(`Package: ${package}`);

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            // Trigger auto-merge workflow by creating a workflow dispatch
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-merge.yml',
              ref: 'master',
              inputs: {
                pr_number: prNumber,
                pr_ref: targetRef,
                build_success: 'true'
              }
            });
