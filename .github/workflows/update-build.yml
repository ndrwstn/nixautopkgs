---
name: Renovate Package Update (self-updating PR with preserved checks)

"on":
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    # Avoid over-restrictive path filters that block synchronize runs
    # If you must filter, include every path your script could touch.
    # paths:
    #   - "packages/*.nix"
    #   - "**/*.nix"
    #   - "flake.*"
    #   - "nix/**"
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  check:
    name: Check State
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.draft == false &&
      github.base_ref == 'master' &&
      startsWith(github.head_ref, 'update/') &&
      github.event.pull_request.user.login == 'renovate[bot]'

    outputs:
      package: ${{ steps.package.outputs.package }}
      needs-hash-update: >-
        ${{ steps.check-hash-commit.outputs.needs-hash-update }}
      pr-number: ${{ github.event.pull_request.number }}
      commit-sha: ${{ github.event.pull_request.head.sha }}
      branch-ref: ${{ github.head_ref }}

    steps:
      - name: Extract package name from PR title
        id: package
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          PACKAGE=$(echo "$PR_TITLE" | sed -n 's/.*update \([^ ]*\) to.*/\1/p')
          if [[ -z "$PACKAGE" ]]; then
            echo "Failed to extract package name from title"
            exit 1
          fi
          echo "package=$PACKAGE" >> "$GITHUB_OUTPUT"

      - name: Checkout at PR head SHA
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Check if hash update commit already exists
        id: check-hash-commit
        run: |
          PACKAGE="${{ steps.package.outputs.package }}"
          LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          EXPECTED="chore: update $PACKAGE package hashes"
          if [[ "$LATEST_COMMIT_MSG" == "$EXPECTED" ]]; then
            echo "needs-hash-update=false" >> "$GITHUB_OUTPUT"
          else
            echo "needs-hash-update=true" >> "$GITHUB_OUTPUT"
          fi

  update-hash:
    name: Update Package Hashes
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.needs-hash-update == 'true'
    outputs:
      hash-update-success: ${{ steps.update-hash.outputs.script_success }}
      has-changes: ${{ steps.check-changes.outputs.has_changes }}
      commit-sha: ${{ steps.commit.outputs.commit_sha }}

    steps:
      - name: Checkout at PR head SHA
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check.outputs.commit-sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Configure git author
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email \
            "github-actions[bot]@users.noreply.github.com"

      - name: Run hash update script
        id: update-hash
        shell: bash
        run: |
          set -e
          PACKAGE="${{ needs.check.outputs.package }}"
          SCRIPT="./bin/update-$PACKAGE"
          if [[ ! -x "$SCRIPT" ]]; then
            if [[ -f "$SCRIPT" ]]; then chmod +x "$SCRIPT"; fi
          fi
          if [[ ! -f "$SCRIPT" ]]; then
            echo "Script $SCRIPT not found"
            echo "script_success=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          set +e
          nix develop --command "$SCRIPT" 2>&1 | tee /tmp/update_output.log
          CODE=${PIPESTATUS[0]}
          set -e

          if [[ $CODE -eq 0 ]]; then
            echo "script_success=true" >> "$GITHUB_OUTPUT"
          else
            echo "script_success=false" >> "$GITHUB_OUTPUT"
            {
              echo "error_details<<EOF"
              tail -200 /tmp/update_output.log
              echo "EOF"
            } >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            git add -A
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit and push changes to PR branch
        id: commit
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          PACKAGE="${{ needs.check.outputs.package }}"
          MSG="chore: update $PACKAGE package hashes"
          git commit -m "$MSG"
          # Push to the same PR branch to trigger pull_request.synchronize
           git push origin HEAD:${{ needs.check.outputs.branch-ref }}
           NEW_SHA=$(git rev-parse HEAD)
           echo "commit_sha=$NEW_SHA" >> "$GITHUB_OUTPUT"

      - name: Comment on failure
        if: failure() && steps.update-hash.outputs.script_success == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `❌ Hash Update Failed

             Package: \`${{ needs.check.outputs.package }}\`

            \`\`\`
            ${{ steps.update-hash.outputs.error_details }}
            \`\`\`
            `;
             await github.rest.issues.createComment({
               issue_number: ${{ needs.check.outputs.pr-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });

  build:
    name: Build
    needs: [check, update-hash]
    if: |
      needs.check.result == 'success' &&
      (needs.update-hash.result == 'success' ||
       needs.update-hash.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64-linux
            runner: ubuntu-latest
          - platform: aarch64-linux
            runner: ubuntu-latest
          - platform: x86_64-darwin
            runner: macos-13
          - platform: aarch64-darwin
            runner: macos-14
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Determine commit SHA to build
        id: commit-sha
        run: |
          if [[ -n "${{ needs.update-hash.outputs.commit-sha }}" ]]; then
            echo "checkout_sha=${{ needs.update-hash.outputs.commit-sha }}" \
              >> "$GITHUB_OUTPUT"
           else
              echo "checkout_sha=${{ needs.check.outputs.commit-sha }}" \
                >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.commit-sha.outputs.checkout_sha }}

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build package on ${{ matrix.platform }}
        shell: bash
        run: |
          PACKAGE="${{ needs.check.outputs.package }}"
          PLATFORM="${{ matrix.platform }}"
           echo "Building $PACKAGE on $PLATFORM at" \
             "${{ steps.commit-sha.outputs.checkout_sha }}"
           ./bin/build-package --platform "$PLATFORM" \
             --package "$PACKAGE"

      - name: Report build status on updated commit
        uses: LouisBrunner/checks-action@v2.0.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Build ${{ matrix.platform }}"
          sha: ${{ steps.commit-sha.outputs.checkout_sha }}
          conclusion: ${{ job.status }}
          output: >-
            {"summary": "Build completed for ${{ needs.check.outputs.package }}
            on ${{ matrix.platform }}"}

  # workflow-summary:
  #   name: Workflow Summary
  #   runs-on: ubuntu-latest
  #   needs: [check-state, update-hash, build-matrix]
  #   if: always()
  #   steps:
  #     - name: Summary
  #       run: |
  #         echo "Package: ${{ needs.check-state.outputs.package }}"
  #         echo "Needed hash update:" \
  #           "${{ needs.check-state.outputs.needs-hash-update }}"
  #         echo "Hash update result: ${{ needs.update-hash.result }}"
  #         echo "Hash update success:" \
  #           "${{ needs.update-hash.outputs.hash-update-success }}"
  #         echo "Had changes: ${{ needs.update-hash.outputs.has-changes }}"
  #         echo "New commit SHA: ${{ needs.update-hash.outputs.commit-sha }}"
  #         echo "Build matrix result: ${{ needs.build-matrix.result }}"
