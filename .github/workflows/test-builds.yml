name: üß™ Test Package Builds

on:
  # SECURITY: Only allow workflow_dispatch from trusted automation workflows
  # Manual triggering by users is not permitted for security
  workflow_dispatch:
    inputs:
      package:
        description: "Package to test (gcs, opencode, or all)"
        required: true
        type: string
      pr_number:
        description: "PR number (if applicable)"
        required: false
        type: string
      target_ref:
        description: "Target branch/ref to test"
        required: true
        type: string

jobs:
  # SECURITY: Validate that this is a legitimate Renovate PR build test
  security-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      is-secure: ${{ steps.validate.outputs.is-secure }}
      package: ${{ github.event.inputs.package }}
      pr-number: ${{ github.event.inputs.pr_number }}
      target-ref: ${{ github.event.inputs.target_ref }}
    steps:
      - name: Validate build test security
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            console.log("=== BUILD TEST SECURITY VALIDATION ===");

            const prNumber = '${{ github.event.inputs.pr_number }}';
            const targetRef = '${{ github.event.inputs.target_ref }}';
            const package = '${{ github.event.inputs.package }}';

            console.log(`PR Number: ${prNumber}`);
            console.log(`Target Ref: ${targetRef}`);
            console.log(`Package: ${package}`);
            console.log(`Triggered by: ${context.actor}`);

            // If no PR number, this might be a manual test - allow but log
            if (!prNumber) {
              console.log("‚ö†Ô∏è  No PR number provided - allowing manual build test");
              core.setOutput('is-secure', 'true');
              return;
            }

            // SECURITY CHECK: Get PR details for validation
            let pr;
            try {
              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              pr = prData;
            } catch (error) {
              console.log(`‚ùå SECURITY: Failed to fetch PR ${prNumber}: ${error.message}`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK: PR must be from renovate[bot]
            if (pr.user.login !== 'renovate[bot]') {
              console.log(`‚ùå SECURITY: PR author is '${pr.user.login}', not 'renovate[bot]'`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK: Branch must have renovate prefix
            if (!pr.head.ref.startsWith('nixautopkgs/')) {
              console.log(`‚ùå SECURITY: Branch '${pr.head.ref}' does not have renovate prefix`);
              core.setOutput('is-secure', 'false');
              return;
            }

            console.log("‚úÖ SECURITY: Build test validation passed");
            core.setOutput('is-secure', 'true');

  test-builds:
    runs-on: ubuntu-latest
    needs: security-validation
    if: needs.security-validation.outputs.is-secure == 'true'
    outputs:
      build-success: ${{ steps.build-summary.outputs.success }}
      package: ${{ needs.security-validation.outputs.package }}
      pr-number: ${{ needs.security-validation.outputs.pr-number }}
    strategy:
      fail-fast: false
      matrix:
        platform: [x86_64-linux, aarch64-linux, x86_64-darwin, aarch64-darwin]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.security-validation.outputs.target-ref }}

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Test builds for ${{ matrix.platform }}
        id: build-test
        run: |
          PACKAGE="${{ needs.security-validation.outputs.package }}"
          PLATFORM="${{ matrix.platform }}"
          echo "Building validated package: $PACKAGE on platform: $PLATFORM"

          if [[ "$PACKAGE" == "gcs" ]]; then
            echo "Building only GCS package for $PLATFORM..."
            if nix build .#gcs --system $PLATFORM --no-link; then
              echo "‚úÖ GCS build successful on $PLATFORM"
              echo "success=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå GCS build failed on $PLATFORM"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          elif [[ "$PACKAGE" == "opencode" ]]; then
            echo "Building only OpenCode package for $PLATFORM..."
            if nix build .#opencode --system $PLATFORM --no-link; then
              echo "‚úÖ OpenCode build successful on $PLATFORM"
              echo "success=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå OpenCode build failed on $PLATFORM"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "Building all packages for $PLATFORM..."
            if ./bin/build-$PLATFORM.sh; then
              echo "‚úÖ All packages build successful on $PLATFORM"
              echo "success=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Build failed on $PLATFORM"
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

  build-summary:
    runs-on: ubuntu-latest
    needs: test-builds
    if: always()
    outputs:
      success: ${{ steps.summary.outputs.success }}
    steps:
      - name: Summarize build results
        id: summary
        run: |
          # Check if all builds succeeded
          BUILD_SUCCESS=true

          # Note: In a matrix job, we need to check if any job failed
          # GitHub Actions doesn't provide a direct way to check this in outputs
          # So we'll use the job result status
          if [[ "${{ needs.test-builds.result }}" != "success" ]]; then
            BUILD_SUCCESS=false
          fi

          echo "success=$BUILD_SUCCESS" >> $GITHUB_OUTPUT

          if [[ "$BUILD_SUCCESS" == "true" ]]; then
            echo "üéâ All builds successful on all platforms!"
          else
            echo "üí• One or more builds failed"
          fi

  trigger-auto-merge:
    runs-on: ubuntu-latest
    needs: [security-validation, test-builds, build-summary]
    if: always() && needs.build-summary.outputs.success == 'true' && needs.security-validation.outputs.pr-number != ''
    steps:
      - name: Trigger auto-merge workflow
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ needs.security-validation.outputs.pr-number }}';
            const package = '${{ needs.security-validation.outputs.package }}';

            console.log(`Triggering auto-merge for validated Renovate PR: ${prNumber}`);
            console.log(`Package: ${package}`);

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });

            // Trigger auto-merge workflow by creating a workflow dispatch
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-merge.yml',
              ref: pr.head.ref,
              inputs: {
                pr_number: prNumber,
                pr_ref: pr.head.ref,
                build_success: 'true'
              }
            });

  report-failure:
    runs-on: ubuntu-latest
    needs: [security-validation, test-builds, build-summary]
    if: always() && needs.build-summary.outputs.success == 'false' && needs.security-validation.outputs.pr-number != ''
    steps:
      - name: Comment on failed build
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ needs.security-validation.outputs.pr-number }}';
            const package = '${{ needs.security-validation.outputs.package }}';

            await github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Build tests failed**: One or more builds did not pass on all platforms.\n\n**Tested platforms:**\n- x86_64-linux\n- aarch64-linux\n- x86_64-darwin\n- aarch64-darwin\n\n**Package tested:** ${package}\n\nüîí **Security validated**: This is a legitimate Renovate PR\n\nPlease check the build logs and fix any issues before merging.`
            });
