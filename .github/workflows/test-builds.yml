name: Test Builds

on:
  pull_request:
    types: [synchronize]
    branches: [master]

permissions:
  contents: read # For checkout

jobs:
  # SECURITY: Validate that this is a legitimate Renovate PR build test
  security-validation:
    name: "Security Validation"
    runs-on: ubuntu-latest
    if: github.actor == 'github-actions[bot]'
    outputs:
      is-secure: ${{ steps.validate.outputs.is-secure }}
      package: ${{ steps.extract-package.outputs.package }}
      pr-number: ${{ github.event.pull_request.number }}
      commit-sha: ${{ github.event.pull_request.head.sha }}
      branch-ref: ${{ github.head_ref }}
    steps:
      - name: Extract package name from PR title
        id: extract-package
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"

          # Extract package name between "update " and " to "
          PACKAGE=$(echo "$PR_TITLE" | \
            sed -n 's/.*update \([^ ]*\) to.*/\1/p')

          if [[ -z "$PACKAGE" ]]; then
            echo "❌ ERROR: Failed to extract package name from PR title"
            exit 1
          fi

          echo "Detected package: $PACKAGE"
          echo "package=$PACKAGE" >> $GITHUB_OUTPUT

      - name: Validate build test security
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            console.log("=== BUILD MATRIX SECURITY VALIDATION ===");

            const prNumber = ${{ github.event.pull_request.number }};
            const commitSha = '${{ github.event.pull_request.head.sha }}';
            const package = '${{ steps.extract-package.outputs.package }}';
            const branchRef = '${{ github.head_ref }}';
            const prAuthor = '${{ github.event.pull_request.user.login }}';
            const prTitle = '${{ github.event.pull_request.title }}';

            console.log(`PR Number: ${prNumber}`);
            console.log(`Commit SHA: ${commitSha}`);
            console.log(`Package: ${package}`);
            console.log(`Branch Ref: ${branchRef}`);
            console.log(`Triggered by: ${context.actor}`);
            console.log(`PR Author: ${prAuthor}`);
            console.log(`PR Title: ${prTitle}`);

            // SECURITY CHECK: Actor must be github-actions[bot]
            if (context.actor !== 'github-actions[bot]') {
              console.log(`❌ SECURITY: Actor is '${context.actor}', ` +
                         `not 'github-actions[bot]'`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK: PR must be from renovate[bot]
            if (prAuthor !== 'renovate[bot]') {
              console.log(`❌ SECURITY: PR author is '${prAuthor}', ` +
                         `not 'renovate[bot]'`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK: Branch must have renovate prefix
            if (!branchRef.startsWith('update/')) {
              console.log(`❌ SECURITY: Branch '${branchRef}' ` +
                         `does not have renovate prefix`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK: PR title must match pattern
            if (!prTitle.match(/^chore: update .+ to .+$/)) {
              console.log(`❌ SECURITY: PR title '${prTitle}' ` +
                         `does not match expected pattern`);
              core.setOutput('is-secure', 'false');
              return;
            }

            console.log("✅ SECURITY: Build matrix validation passed");
            core.setOutput('is-secure', 'true');

  build-matrix:
    needs: security-validation
    if: needs.security-validation.outputs.is-secure == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64-linux
            runner: ubuntu-latest
          - platform: aarch64-linux
            runner: ubuntu-latest
          - platform: x86_64-darwin
            runner: macos-13
          - platform: aarch64-darwin
            runner: macos-14
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.security-validation.outputs.commit-sha }}

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build package on ${{ matrix.platform }}
        run: |
          PACKAGE="${{ needs.security-validation.outputs.package }}"
          PLATFORM="${{ matrix.platform }}"

          echo "=== Building $PACKAGE on $PLATFORM ==="
          echo "Package: $PACKAGE"
          echo "Platform: $PLATFORM"
          echo "Commit SHA: ${{ needs.security-validation.outputs.commit-sha }}"

          # Use the build-package script for consistent builds
          if ./bin/build-package --platform "$PLATFORM" --package "$PACKAGE"; then
            echo "✅ Build successful: $PACKAGE on $PLATFORM"
          else
            echo "❌ Build failed: $PACKAGE on $PLATFORM"
            exit 1
          fi
