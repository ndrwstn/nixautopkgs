name: üß™ Build Matrix

on:
  workflow_dispatch:
    inputs:
      pr_number:
        required: true
        type: string
      commit_sha:
        required: true
        type: string
      package:
        required: true
        type: string
      branch_ref:
        required: true
        type: string

permissions:
  contents: read # For checkout
  pull-requests: write # For PR comments
  issues: write # For issue comments

jobs:
  # SECURITY: Validate that this is a legitimate Renovate PR build test
  security-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      is-secure: ${{ steps.validate.outputs.is-secure }}
      package: ${{ github.event.inputs.package }}
      pr-number: ${{ github.event.inputs.pr_number }}
      commit-sha: ${{ github.event.inputs.commit_sha }}
      branch-ref: ${{ github.event.inputs.branch_ref }}
    steps:
      - name: Validate build test security
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            console.log("=== BUILD MATRIX SECURITY VALIDATION ===");

            const prNumber = '${{ github.event.inputs.pr_number }}';
            const commitSha = '${{ github.event.inputs.commit_sha }}';
            const package = '${{ github.event.inputs.package }}';
            const branchRef = '${{ github.event.inputs.branch_ref }}';

            console.log(`PR Number: ${prNumber}`);
            console.log(`Commit SHA: ${commitSha}`);
            console.log(`Package: ${package}`);
            console.log(`Branch Ref: ${branchRef}`);
            console.log(`Triggered by: ${context.actor}`);

            // SECURITY CHECK: Get PR details for validation
            let pr;
            try {
              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              pr = prData;
            } catch (error) {
              console.log(`‚ùå SECURITY: Failed to fetch PR ${prNumber}: ${error.message}`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK: PR must be from renovate[bot]
            if (pr.user.login !== 'renovate[bot]') {
              console.log(`‚ùå SECURITY: PR author is '${pr.user.login}', not 'renovate[bot]'`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK: Branch must have renovate prefix
            if (!pr.head.ref.startsWith('nixoverlays/')) {
              console.log(`‚ùå SECURITY: Branch '${pr.head.ref}' does not have renovate prefix`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK: Commit SHA must match PR head
            if (pr.head.sha !== commitSha) {
              console.log(`‚ùå SECURITY: Commit SHA mismatch. PR head: ${pr.head.sha}, provided: ${commitSha}`);
              core.setOutput('is-secure', 'false');
              return;
            }

            console.log("‚úÖ SECURITY: Build matrix validation passed");
            core.setOutput('is-secure', 'true');

  build-matrix:
    runs-on: ubuntu-latest
    needs: security-validation
    if: needs.security-validation.outputs.is-secure == 'true'
    strategy:
      fail-fast: false
      matrix:
        platform: [x86_64-linux, aarch64-linux, x86_64-darwin, aarch64-darwin]
    outputs:
      matrix-success: ${{ steps.matrix-result.outputs.success }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.security-validation.outputs.commit-sha }}

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build package on ${{ matrix.platform }}
        id: build
        run: |
          PACKAGE="${{ needs.security-validation.outputs.package }}"
          PLATFORM="${{ matrix.platform }}"

          echo "=== Building $PACKAGE on $PLATFORM ==="
          echo "Package: $PACKAGE"
          echo "Platform: $PLATFORM"
          echo "Commit SHA: ${{ needs.security-validation.outputs.commit-sha }}"

          # Use the build-package script for consistent builds
          if ./bin/build-package --platform "$PLATFORM" --package "$PACKAGE"; then
            echo "‚úÖ Build successful: $PACKAGE on $PLATFORM"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Build failed: $PACKAGE on $PLATFORM"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Set matrix job result
        id: matrix-result
        if: always()
        run: |
          if [[ "${{ steps.build.outcome }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Matrix job succeeded for ${{ matrix.platform }}"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Matrix job failed for ${{ matrix.platform }}"
          fi

  aggregate-results:
    runs-on: ubuntu-latest
    needs: [security-validation, build-matrix]
    if: always()
    outputs:
      all-builds-success: ${{ steps.aggregate.outputs.success }}
      failed-platforms: ${{ steps.aggregate.outputs.failed-platforms }}
    steps:
      - name: Aggregate build results
        id: aggregate
        run: |
          echo "=== Aggregating Build Matrix Results ==="

          # Check the overall result of the matrix job
          MATRIX_RESULT="${{ needs.build-matrix.result }}"
          echo "Matrix job result: $MATRIX_RESULT"

          if [[ "$MATRIX_RESULT" == "success" ]]; then
            echo "‚úÖ All platform builds succeeded"
            echo "success=true" >> $GITHUB_OUTPUT
            echo "failed-platforms=" >> $GITHUB_OUTPUT
          else
            echo "‚ùå One or more platform builds failed"
            echo "success=false" >> $GITHUB_OUTPUT
            # For now, use placeholder for failed platforms
            # Future enhancement: parse individual matrix job results
            echo "failed-platforms=PLACEHOLDER" >> $GITHUB_OUTPUT
          fi

  trigger-auto-merge:
    runs-on: ubuntu-latest
    needs: [security-validation, build-matrix, aggregate-results]
    if: always() && needs.aggregate-results.outputs.all-builds-success == 'true'
    steps:
      - name: Trigger auto-merge workflow
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ needs.security-validation.outputs.pr-number }}';
            const branchRef = '${{ needs.security-validation.outputs.branch-ref }}';
            const package = '${{ needs.security-validation.outputs.package }}';

            console.log(`‚úÖ All builds successful - triggering auto-merge`);
            console.log(`PR Number: ${prNumber}`);
            console.log(`Branch Ref: ${branchRef}`);
            console.log(`Package: ${package}`);

            // Trigger auto-merge workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-merge.yml',
              ref: 'master',
              inputs: {
                pr_number: prNumber,
                pr_ref: branchRef,
                build_success: 'true'
              }
            });

            console.log(`üöÄ Auto-merge workflow triggered for PR ${prNumber}`);

  report-failure:
    runs-on: ubuntu-latest
    needs: [security-validation, build-matrix, aggregate-results]
    if: always() && needs.aggregate-results.outputs.all-builds-success == 'false'
    steps:
      - name: Comment on failed build
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ needs.security-validation.outputs.pr-number }}';
            const package = '${{ needs.security-validation.outputs.package }}';
            const failedPlatforms = '${{ needs.aggregate-results.outputs.failed-platforms }}';

            const comment = `‚ùå **Build Matrix Failed**

            Package: ${package}
            Failed Platforms: ${failedPlatforms}
            Error Details: PLACEHOLDER

            Some platform builds failed. Please check the build logs for details.

            **Tested platforms:**
            - x86_64-linux
            - aarch64-linux  
            - x86_64-darwin
            - aarch64-darwin

            üîí **Security validated**: This is a legitimate Renovate PR`;

            await github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

            console.log(`üí¨ Failure comment posted to PR ${prNumber}`);
