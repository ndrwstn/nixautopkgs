name: üöÄ Auto-merge Renovate PRs

on:
  # SECURITY: Only allow workflow_dispatch from trusted automation workflows
  # Manual triggering by users is not permitted for security
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to merge"
        required: true
        type: string
      pr_ref:
        description: "PR branch reference"
        required: true
        type: string
      build_success:
        description: "Build success status"
        required: true
        type: string

jobs:
  # SECURITY: Comprehensive validation before any auto-merge
  security-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      is-secure: ${{ steps.validate.outputs.is-secure }}
      pr-number: ${{ github.event.inputs.pr_number }}
      pr-ref: ${{ github.event.inputs.pr_ref }}
      build-success: ${{ github.event.inputs.build_success }}
    steps:
      - name: Validate workflow dispatch security
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            console.log("=== AUTO-MERGE SECURITY VALIDATION ===");

            const prNumber = '${{ github.event.inputs.pr_number }}';
            const prRef = '${{ github.event.inputs.pr_ref }}';
            const buildSuccess = '${{ github.event.inputs.build_success }}';

            console.log(`PR Number: ${prNumber}`);
            console.log(`PR Ref: ${prRef}`);
            console.log(`Build Success: ${buildSuccess}`);
            console.log(`Triggered by: ${context.actor}`);

            // SECURITY CHECK 1: Build must be successful
            if (buildSuccess !== 'true') {
              console.log("‚ùå SECURITY: Build success is not 'true'");
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK 2: Get PR details for validation
            let pr;
            try {
              const { data: prData } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });
              pr = prData;
            } catch (error) {
              console.log(`‚ùå SECURITY: Failed to fetch PR ${prNumber}: ${error.message}`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK 3: PR must be from renovate[bot]
            if (pr.user.login !== 'renovate[bot]') {
              console.log(`‚ùå SECURITY: PR author is '${pr.user.login}', not 'renovate[bot]'`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK 4: Branch must have renovate prefix
            if (!pr.head.ref.startsWith('nixautopkgs/')) {
              console.log(`‚ùå SECURITY: Branch '${pr.head.ref}' does not have renovate prefix 'nixautopkgs/'`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK 5: PR must have dependencies label
            const hasDepLabel = pr.labels.some(label => label.name === 'dependencies');
            if (!hasDepLabel) {
              console.log("‚ùå SECURITY: PR does not have 'dependencies' label");
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK 6: PR title must match renovate pattern
            const titlePattern = /^chore: update .+ -> .+$/;
            if (!titlePattern.test(pr.title)) {
              console.log(`‚ùå SECURITY: PR title '${pr.title}' does not match renovate pattern`);
              core.setOutput('is-secure', 'false');
              return;
            }

            // SECURITY CHECK 7: PR must be open and mergeable
            if (pr.state !== 'open') {
              console.log(`‚ùå SECURITY: PR state is '${pr.state}', not 'open'`);
              core.setOutput('is-secure', 'false');
              return;
            }

            console.log("‚úÖ SECURITY: All validation checks passed");
            core.setOutput('is-secure', 'true');

  auto-merge:
    runs-on: ubuntu-latest
    needs: security-validation
    if: needs.security-validation.outputs.is-secure == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.security-validation.outputs.pr-ref }}

      - name: Get validated PR details
        id: pr-details
        run: |
          echo "pr_number=${{ needs.security-validation.outputs.pr-number }}" >> $GITHUB_OUTPUT
          echo "build_success=${{ needs.security-validation.outputs.build-success }}" >> $GITHUB_OUTPUT
          echo "‚úÖ Using security-validated PR details"

      - name: Auto-merge validated Renovate PR
        if: steps.pr-details.outputs.build_success == 'true'
        uses: pascalgn/merge-action@v0.15.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          merge_method: squash
          merge_commit_message: pull-request-title

      - name: Log successful auto-merge
        if: steps.pr-details.outputs.build_success == 'true'
        run: |
          echo "‚úÖ Successfully auto-merged Renovate PR #${{ steps.pr-details.outputs.pr_number }}"
          echo "üîí All security validations passed"
          echo "‚úÖ All build tests passed"

      - name: Comment on failed build (should not happen with proper validation)
        if: steps.pr-details.outputs.build_success != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.pr-details.outputs.pr_number }}';

            await github.rest.issues.createComment({
              issue_number: parseInt(prNumber),
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Auto-merge failed**: Build success validation failed.\n\n‚ö†Ô∏è **Security Notice**: This should not happen if proper validation is working.\n\nPlease check the workflow logs and security validation steps.'
            });
