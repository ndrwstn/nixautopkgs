---
name: Update Package Hashes with nix-update

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  check:
    name: Check PR State
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.draft == false &&
      github.base_ref == 'master' &&
      startsWith(github.head_ref, 'update/') &&
      github.event.pull_request.user.login == 'renovate[bot]'

    outputs:
      package: ${{ steps.package.outputs.package }}
      needs-hash-update: ${{ steps.check-hash-commit.outputs.needs-hash-update }}
      pr-number: ${{ github.event.pull_request.number }}
      commit-sha: ${{ github.event.pull_request.head.sha }}
      branch-ref: ${{ github.head_ref }}
      supported-platforms: ${{ steps.platforms.outputs.platforms }}

    steps:
      - name: Extract package name from PR title
        id: package
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          PACKAGE=$(echo "$PR_TITLE" | sed -n 's/.*update \([^ ]*\) to.*/\1/p')
          if [[ -z "$PACKAGE" ]]; then
            echo "Failed to extract package name from title"
            exit 1
          fi
          echo "package=$PACKAGE" >> "$GITHUB_OUTPUT"

      - name: Checkout at PR head SHA
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Check if hash update commit already exists
        id: check-hash-commit
        run: |
          PACKAGE="${{ steps.package.outputs.package }}"
          LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          EXPECTED="chore: update $PACKAGE package hashes"
          if [[ "$LATEST_COMMIT_MSG" == "$EXPECTED" ]]; then
            echo "needs-hash-update=false" >> "$GITHUB_OUTPUT"
          else
            echo "needs-hash-update=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Determine supported platforms
        id: platforms
        run: |
          PACKAGE="${{ steps.package.outputs.package }}"

          # Get supported platforms by checking broken flags
          PLATFORMS=""
          for SYSTEM in "x86_64-linux" "aarch64-linux" "x86_64-darwin" "aarch64-darwin"; do
            if nix eval .#packages.$SYSTEM.$PACKAGE.meta.broken --json 2>/dev/null | grep -q "false"; then
              if [[ -n "$PLATFORMS" ]]; then
                PLATFORMS="$PLATFORMS,$SYSTEM"
              else
                PLATFORMS="$SYSTEM"
              fi
            fi
          done

          echo "platforms=$PLATFORMS" >> "$GITHUB_OUTPUT"
          echo "Supported platforms: $PLATFORMS"

  update-hashes:
    name: Update Package Hashes
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.needs-hash-update == 'true'
    outputs:
      hash-update-success: ${{ steps.update-hash.outputs.success }}
      has-changes: ${{ steps.check-changes.outputs.has_changes }}
      commit-sha: ${{ steps.commit.outputs.commit_sha }}

    steps:
      - name: Checkout at PR head SHA
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check.outputs.commit-sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Configure git author
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email \
            "github-actions[bot]@users.noreply.github.com"

      - name: Update package hashes with nix-update
        id: update-hash
        run: |
          set -e
          PACKAGE="${{ needs.check.outputs.package }}"

          echo "Updating hashes for $PACKAGE"

          # Run nix-update with appropriate flags
          if [[ "$PACKAGE" == "opencode" ]]; then
            # opencode has subpackages
            nix-update --flake --commit --build --subpackage tui --subpackage node_modules "$PACKAGE"
          else
            # Simple package like gcs
            nix-update --flake --commit --build "$PACKAGE"
          fi

          echo "success=true" >> "$GITHUB_OUTPUT"

      - name: Check for changes
        id: check-changes
        if: steps.update-hash.outcome == 'success'
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push changes to PR branch
        id: commit
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          # Push to the same PR branch to trigger pull_request.synchronize
          git push origin HEAD:${{ needs.check.outputs.branch-ref }}
          NEW_SHA=$(git rev-parse HEAD)
          echo "commit_sha=$NEW_SHA" >> "$GITHUB_OUTPUT"

      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `❌ Hash Update Failed

             Package: \`${{ needs.check.outputs.package }}\`

            nix-update encountered an error while updating the package hashes.
            Please check the workflow logs for detailed error information.

            @ndrwstn Manual intervention required.
            `;
             await github.rest.issues.createComment({
               issue_number: ${{ needs.check.outputs.pr-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });

  build:
    name: Build
    needs: [check, update-hashes]
    if: |
      needs.check.result == 'success' &&
      (needs.update-hashes.result == 'success' ||
       needs.update-hashes.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.check.outputs.supported-platforms) }}
        include:
          - platform: x86_64-linux
            runner: ubuntu-latest
          - platform: x86_64-darwin
            runner: macos-13
          - platform: aarch64-darwin
            runner: macos-14
          - platform: aarch64-linux
            runner: ubuntu-latest

    runs-on: ${{ matrix.runner }}
    steps:
      - name: Determine commit SHA to build
        id: commit-sha
        run: |
          if [[ -n "${{ needs.update-hashes.outputs.commit-sha }}" ]]; then
            echo "checkout_sha=${{ needs.update-hashes.outputs.commit-sha }}" \
              >> "$GITHUB_OUTPUT"
           else
              echo "checkout_sha=${{ needs.check.outputs.commit-sha }}" \
                >> "$GITHUB_OUTPUT"
           fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.commit-sha.outputs.checkout_sha }}

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build package on ${{ matrix.platform }}
        shell: bash
        run: |
          PACKAGE="${{ needs.check.outputs.package }}"
          PLATFORM="${{ matrix.platform }}"
           echo "Building $PACKAGE on $PLATFORM at" \
             "${{ steps.commit-sha.outputs.checkout_sha }}"
           nix build .#packages.$PLATFORM.$PACKAGE

      - name: Report build status
        uses: LouisBrunner/checks-action@v2.0.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Build ${{ matrix.platform }}"
          sha: ${{ steps.commit-sha.outputs.checkout_sha }}
          conclusion: ${{ job.status }}
          output: >-
            {"summary": "Build completed for ${{ needs.check.outputs.package }}
            on ${{ matrix.platform }}"}

  report-results:
    name: Report Results
    runs-on: ubuntu-latest
    needs: [check, update-hashes, build]
    if: always()
    steps:
      - name: Prepare summary
        id: summary
        run: |
          PACKAGE="${{ needs.check.outputs.package }}"
          HASH_RESULT="${{ needs.update-hashes.result }}"
          BUILD_RESULT="${{ needs.build.result }}"

          if [[ "$HASH_RESULT" == "success" || "$HASH_RESULT" == "skipped" ]]; then
            if [[ "$BUILD_RESULT" == "success" ]]; then
              echo "summary=✅ Package update completed successfully" >> "$GITHUB_OUTPUT"
              echo "status=success" >> "$GITHUB_OUTPUT"
            else
              echo "summary=❌ Package update failed during build" >> "$GITHUB_OUTPUT"
              echo "status=failure" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "summary=❌ Package update failed during hash update" >> "$GITHUB_OUTPUT"
            echo "status=failure" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment results on PR
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `${{ steps.summary.outputs.summary }}`;
            const package = "${{ needs.check.outputs.package }}";
            const hashResult = "${{ needs.update-hashes.result }}";
            const buildResult = "${{ needs.build.result }}";

            let comment = `## Update Results for ${package}

            ${summary}

            **Hash Update:** ${hashResult}
            **Build Matrix:** ${buildResult}
            `;

            if (hashResult !== 'success' && hashResult !== 'skipped') {
              comment += `

            ### Next Steps
            @ndrwstn Manual intervention required for hash update failure.
            `;
            } else if (buildResult !== 'success') {
              comment += `

            ### Next Steps
            @ndrwstn Manual intervention required for build failure.
            `;
            }

            await github.rest.issues.createComment({
              issue_number: ${{ needs.check.outputs.pr-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment,
            });
