#!/bin/bash

set -euo pipefail

# IMPORTANT: Update this version string every time the script is modified
echo ">>> OPENCODE UPDATE HASH SCRIPT - LAST MODIFIED 2025-08-23 00:40 <<<"

PACKAGE_FILE="packages/opencode.nix"
REPO_OWNER="sst"
REPO_NAME="opencode"

if [[ ! -f "$PACKAGE_FILE" ]]; then
	echo "Error: $PACKAGE_FILE not found"
	exit 1
fi

# Get version from package file (already updated by Renovate)
VERSION=$(grep '^\s*version = ' "$PACKAGE_FILE" | head -1 | sed 's/.*version = "\([^"]*\)".*/\1/')

echo "Updating hashes for version $VERSION"

# Fetch new source hash for main repo using nix-prefetch-url and convert to SRI format
echo "Fetching main source hash..."
OLD_HASH=$(nix-prefetch-url --unpack "https://github.com/$REPO_OWNER/$REPO_NAME/archive/v$VERSION.tar.gz" 2>/dev/null)

if [[ -z "$OLD_HASH" ]]; then
	echo "Error: Failed to fetch main source hash"
	exit 1
fi

MAIN_SOURCE_HASH=$(nix hash convert --hash-algo sha256 --to sri "$OLD_HASH")

if [[ -z "$MAIN_SOURCE_HASH" ]]; then
	echo "Error: Failed to convert hash to SRI format"
	exit 1
fi

echo "Main source hash: $MAIN_SOURCE_HASH"

# Update main source hash (version is already updated by Renovate)
if [[ "$OSTYPE" == "darwin"* ]]; then
	# macOS sed
	sed -i.bak 's|hash = "[^"]*";|hash = "'"$MAIN_SOURCE_HASH"'";|' "$PACKAGE_FILE" && rm -f "$PACKAGE_FILE.bak"
else
	# Linux sed
	sed -i 's|hash = "[^"]*";|hash = "'"$MAIN_SOURCE_HASH"'";|' "$PACKAGE_FILE"
fi

echo "Updated main source hash"

# Helper function to update vendorHash if needed
update_vendorhash_if_needed() {
	local build_output="$1"
	# Use a more robust approach: extract the hash from the specific error block
	local new_hash=$(echo "$build_output" | awk '
		/opencode-tui-.*-go-modules\.drv/ { in_block=1; next }
		in_block && /got:/ { print $2; in_block=0; exit }
		in_block && /^error:/ && !/got:/ { in_block=0 }
	')
	
	if [[ -n "$new_hash" ]]; then
		echo "Found vendorHash mismatch: updating to $new_hash"
		
		if [[ "$OSTYPE" == "darwin"* ]]; then
			sed -i.bak 's|vendorHash = "sha256-[^"]*";|vendorHash = "'"$new_hash"'";|' "$PACKAGE_FILE" && rm -f "$PACKAGE_FILE.bak" || {
				echo "ERROR: Failed to update vendorHash"
				exit 1
			}
		else
			sed -i 's|vendorHash = "sha256-[^"]*";|vendorHash = "'"$new_hash"'";|' "$PACKAGE_FILE" || {
				echo "ERROR: Failed to update vendorHash"
				exit 1
			}
		fi
		return 0
	fi
	return 1
}

# Helper function to update node_modules hash if needed
update_node_modules_hash_if_needed() {
	local build_output="$1"
	# Use a more robust approach: extract the hash from the specific error block
	local new_hash=$(echo "$build_output" | awk '
		/opencode-node_modules-.*\.drv/ { in_block=1; next }
		in_block && /got:/ { print $2; in_block=0; exit }
		in_block && /^error:/ && !/got:/ { in_block=0 }
	')
	
	if [[ -n "$new_hash" ]]; then
		echo "Found node_modules hash mismatch: updating to $new_hash"
		
		if [[ "$OSTYPE" == "darwin"* ]]; then
			sed -i.bak 's|opencode-node-modules-hash = "sha256-[^"]*";|opencode-node-modules-hash = "'"$new_hash"'";|' "$PACKAGE_FILE" && rm -f "$PACKAGE_FILE.bak" || {
				echo "ERROR: Failed to update node_modules hash"
				exit 1
			}
		else
			sed -i 's|opencode-node-modules-hash = "sha256-[^"]*";|opencode-node-modules-hash = "'"$new_hash"'";|' "$PACKAGE_FILE" || {
				echo "ERROR: Failed to update node_modules hash"
				exit 1
			}
		fi
		return 0
	fi
	return 1
}

# Build with hash correction loop
echo "Building and updating hashes as needed..."
MAX_ATTEMPTS=5
attempt=0

while [ $attempt -lt $MAX_ATTEMPTS ]; do
	echo "Build attempt $((attempt + 1))..."
	
	if BUILD_OUTPUT=$(nix build .#opencode 2>&1); then
		echo "âœ… Build successful!"
		break
	fi
	
	# Check which hash needs updating
	hash_updated=false
	
	if update_vendorhash_if_needed "$BUILD_OUTPUT"; then
		hash_updated=true
	fi
	
	if update_node_modules_hash_if_needed "$BUILD_OUTPUT"; then
		hash_updated=true
	fi
	
	if [ "$hash_updated" = false ]; then
		echo "ERROR: Build failed but no recognized hash mismatch found"
		echo "Build output:"
		echo "$BUILD_OUTPUT"
		exit 1
	fi
	
	((attempt++))
done

if [ $attempt -eq $MAX_ATTEMPTS ]; then
	echo "ERROR: Failed to fix hashes after $MAX_ATTEMPTS attempts"
	exit 1
fi
echo "Successfully updated $PACKAGE_FILE"
echo "Run 'nix build .#opencode' to verify the build"
