#!/bin/bash

set -euo pipefail

# IMPORTANT: Update this version string every time the script is modified
echo ">>> OPENCODE UPDATE HASH SCRIPT (NO-BUILD VERSION) - LAST MODIFIED 2025-08-23 16:20 <<<"

PACKAGE_FILE="packages/opencode.nix"
REPO_OWNER="sst"
REPO_NAME="opencode"

# Configuration
ORIGINAL_DIR=$(pwd)
TEMP_DIR=$(mktemp -d)
trap 'chmod -R u+w "$TEMP_DIR" 2>/dev/null; rm -rf "$TEMP_DIR"' EXIT

if [[ ! -f "$PACKAGE_FILE" ]]; then
	echo "Error: $PACKAGE_FILE not found"
	exit 1
fi

# Get version from package file (already updated by Renovate)
VERSION=$(grep '^\s*version = ' "$PACKAGE_FILE" | head -1 | sed 's/.*version = "\([^"]*\)".*/\1/')

# Validate version was extracted
if [[ -z "$VERSION" ]]; then
    echo "Error: Failed to extract version from $PACKAGE_FILE"
    echo "Expected format: version = \"X.X.X\";"
    exit 1
fi

echo "Updating hashes for version $VERSION"

# ============================================
# STEP 1: Calculate Main Source Hash
# ============================================
echo "=== Calculating main source hash ==="

# Method 1: Using nix-prefetch-github (preferred)
if command -v nix-prefetch-github &> /dev/null; then
	echo "Using nix-prefetch-github..."
	GITHUB_JSON=$(nix-prefetch-github "$REPO_OWNER" "$REPO_NAME" --rev "v$VERSION" --json)
	MAIN_SOURCE_HASH=$(echo "$GITHUB_JSON" | jq -r '.hash')
	echo "Main source hash: $MAIN_SOURCE_HASH"
else
	# Method 2: Using nix-prefetch-url
	echo "Using nix-prefetch-url..."
	OLD_HASH=$(nix-prefetch-url --unpack "https://github.com/$REPO_OWNER/$REPO_NAME/archive/v$VERSION.tar.gz" 2>/dev/null)
	
	if [[ -z "$OLD_HASH" ]]; then
		echo "Error: Failed to fetch main source hash"
		exit 1
	fi
	
	MAIN_SOURCE_HASH=$(nix hash convert --hash-algo sha256 --to sri "$OLD_HASH")
fi

if [[ -z "$MAIN_SOURCE_HASH" ]]; then
	echo "Error: Failed to calculate main source hash"
	exit 1
fi

echo "Main source hash: $MAIN_SOURCE_HASH"

# ============================================
# STEP 2: Calculate Vendor Hash (Go Dependencies)
# ============================================
echo "=== Calculating vendor hash for TUI ==="

# Clone the repository at the specific version
cd "$TEMP_DIR"
echo "Cloning repository..."
git clone --quiet --depth 1 --branch "v$VERSION" "https://github.com/$REPO_OWNER/$REPO_NAME.git" opencode
cd opencode/packages/tui

# Download and vendor Go dependencies
echo "Downloading Go dependencies..."
export GOPATH="$TEMP_DIR/go"
export GO111MODULE=on

# Download all dependencies
go mod download

# Create vendor directory
echo "Creating vendor directory..."
go mod vendor

# Calculate vendor hash using nix hash
echo "Calculating vendor hash..."
VENDOR_HASH=$(nix hash path vendor)

if [[ -z "$VENDOR_HASH" ]]; then
	echo "Error: Failed to calculate vendor hash"
	exit 1
fi

echo "Vendor hash: $VENDOR_HASH"

# ============================================
# STEP 3: Calculate Node Modules Hash
# ============================================
echo "=== Calculating node_modules hash ==="

# Go back to repo root
cd "$TEMP_DIR/opencode"

# Check if bun is available
if ! command -v bun &> /dev/null; then
	echo "Error: bun is required but not installed"
	echo "Install bun or run this script in nix develop shell"
	exit 1
fi

# Install node modules exactly as the Nix derivation does
echo "Installing node modules with bun..."
export BUN_INSTALL_CACHE_DIR="$TEMP_DIR/bun-cache"
export HOME="$TEMP_DIR/home"
mkdir -p "$HOME"

# Match the exact flags from the Nix derivation
bun install \
	--filter=opencode \
	--force \
	--frozen-lockfile \
	--ignore-scripts \
	--no-progress \
	--production

# Create the same directory structure as the Nix derivation
echo "Creating Nix-compatible directory structure..."
mkdir -p nix-out/node_modules
cp -R ./node_modules nix-out

# Calculate node_modules hash using the same structure as Nix
echo "Calculating node_modules hash..."
NODE_MODULES_HASH=$(nix hash path nix-out)

if [[ -z "$NODE_MODULES_HASH" ]]; then
	echo "Error: Failed to calculate node_modules hash"
	exit 1
fi

echo "Node modules hash: $NODE_MODULES_HASH"

# ============================================
# STEP 4: Update Package File
# ============================================
echo "=== Updating package file ==="

# Go back to original directory
cd "$ORIGINAL_DIR"

# Create backup
cp "$PACKAGE_FILE" "$PACKAGE_FILE.bak"

# Function to safely update file
update_file() {
	local sed_command="$1"
	
	if [[ "$OSTYPE" == "darwin"* ]]; then
		sed -i.tmp "$sed_command" "$PACKAGE_FILE" && rm -f "$PACKAGE_FILE.tmp"
	else
		sed -i "$sed_command" "$PACKAGE_FILE"
	fi
}

# Update main source hash
echo "Updating main source hash..."
update_file "s|hash = \"sha256-[^\"]*\";|hash = \"$MAIN_SOURCE_HASH\";|"

# Update vendor hash
echo "Updating vendor hash..."
update_file "s|vendorHash = \"sha256-[^\"]*\";|vendorHash = \"$VENDOR_HASH\";|"

# Update node_modules hash
echo "Updating node_modules hash..."
update_file "s|opencode-node-modules-hash = \"sha256-[^\"]*\";|opencode-node-modules-hash = \"$NODE_MODULES_HASH\";|"

# ============================================
# STEP 5: Verification
# ============================================
echo "=== Verification ==="

# Show the changes
echo "Changes made:"
if command -v diff &> /dev/null; then
	diff -u "$PACKAGE_FILE.bak" "$PACKAGE_FILE" || true
else
	echo "diff not available, showing updated file content:"
	grep -E "(hash|vendorHash|opencode-node-modules-hash)" "$PACKAGE_FILE"
fi

# Clean up backup
rm -f "$PACKAGE_FILE.bak"

echo ""
echo "âœ… Successfully updated all hashes for OpenCode v$VERSION"
echo ""
echo "Hashes updated:"
echo "  Main source: $MAIN_SOURCE_HASH"
echo "  Vendor:      $VENDOR_HASH"
echo "  Node modules: $NODE_MODULES_HASH"
echo ""
echo "Run 'nix build .#opencode' to verify the build"