#!/bin/bash

set -euo pipefail

# Script to build a single package on a single platform
# Usage: ./bin/build-package --platform PLATFORM --package PACKAGE

SCRIPT_NAME=$(basename "$0")
PLATFORM=""
PACKAGE=""

# Known platforms
VALID_PLATFORMS=("x86_64-linux" "aarch64-linux" "x86_64-darwin" "aarch64-darwin")

# Function to show usage
show_usage() {
    echo "Usage: $SCRIPT_NAME --platform PLATFORM --package PACKAGE"
    echo ""
    echo "Options:"
    echo "  --platform PLATFORM    Target platform (x86_64-linux, aarch64-linux, x86_64-darwin, aarch64-darwin)"
    echo "  --package PACKAGE       Package name to build"
    echo "  --help                  Show this help message"
    echo ""
    echo "Examples:"
    echo "  $SCRIPT_NAME --platform x86_64-linux --package gcs"
    echo "  $SCRIPT_NAME --package opencode --platform aarch64-darwin"
}

# Function to validate platform
validate_platform() {
    local platform="$1"
    for valid_platform in "${VALID_PLATFORMS[@]}"; do
        if [[ "$platform" == "$valid_platform" ]]; then
            return 0
        fi
    done
    return 1
}

# Function to get available packages
get_available_packages() {
    local packages=()
    for package_file in packages/*.nix; do
        if [[ -f "$package_file" ]]; then
            local package_name=$(basename "$package_file" .nix)
            packages+=("$package_name")
        fi
    done
    printf '%s\n' "${packages[@]}"
}

# Function to validate package
validate_package() {
    local package="$1"
    if [[ -f "packages/$package.nix" ]]; then
        return 0
    else
        return 1
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --platform)
            if [[ $# -lt 2 ]] || [[ "$2" =~ ^-- ]]; then
                echo "❌ Error: --platform requires a value" >&2
                show_usage >&2
                exit 1
            fi
            PLATFORM="$2"
            shift 2
            ;;
        --package)
            if [[ $# -lt 2 ]] || [[ "$2" =~ ^-- ]]; then
                echo "❌ Error: --package requires a value" >&2
                show_usage >&2
                exit 1
            fi
            PACKAGE="$2"
            shift 2
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            echo "❌ Unknown option: $1" >&2
            show_usage >&2
            exit 1
            ;;
    esac
done

# Validate required arguments
if [[ -z "$PLATFORM" ]]; then
    echo "❌ Error: --platform is required" >&2
    show_usage >&2
    exit 1
fi

if [[ -z "$PACKAGE" ]]; then
    echo "❌ Error: --package is required" >&2
    show_usage >&2
    exit 1
fi

# Validate platform
if ! validate_platform "$PLATFORM"; then
    echo "❌ Error: Invalid platform '$PLATFORM'" >&2
    echo "Valid platforms: ${VALID_PLATFORMS[*]}" >&2
    exit 1
fi

# Validate package
if ! validate_package "$PACKAGE"; then
    echo "❌ Error: Package '$PACKAGE' not found" >&2
    echo "Available packages:" >&2
    get_available_packages | sed 's/^/  - /' >&2
    exit 1
fi

# Build the package
echo "=== Building $PACKAGE for $PLATFORM ==="
echo "Building $PACKAGE for $PLATFORM..."

if nix build ".#$PACKAGE" --system "$PLATFORM" --no-link; then
    echo "✅ $PACKAGE build successful on $PLATFORM"
    exit 0
else
    echo "❌ $PACKAGE build failed on $PLATFORM"
    exit 1
fi